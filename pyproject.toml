[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs",
  "hatchling",
]

[project]
name = "sqlean-driver"
description = "SQLAlchemy dialect for the sqlean.py SQLite wrapper"
readme = "README.md"
keywords = [
]
license = "MIT"
maintainers = [{ name = "Edgar Ramírez Mondragón", email = "edgarrm358@gmail.com" }]
authors = [{ name = "Edgar Ramírez Mondragón", email = "edgarrm358@gmail.com" }]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: SQL",
  "Topic :: Database",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
dynamic = [
  "version",
]
dependencies = [
  "greenlet>=3.0.0a1",
  "sqlalchemy>=1.4",
  "sqlean-py>=0.21.5.1",
]
[project.optional-dependencies]
dev = [
  "pytest",
]
[project.urls]
Changelog = "https://github.com/edgarrmondragon/sqlean-driver/blob/main/CHANGELOG.md"
Documentation = "https://github.com/edgarrmondragon/sqlean-driver#readme"
Issues = "https://github.com/edgarrmondragon/sqlean-driver/issues"
Source = "https://github.com/edgarrmondragon/sqlean-driver"
[project.entry-points."sqlalchemy.dialects"]
"sqlite.sqlean" = "sqlean_driver:SQLeanDialect"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-github-actions-annotate-failures",
  "sqlalchemy=={matrix:sqlalchemy:2}.*",
]
matrix-name-format = "{variable}_{value}"
[tool.hatch.envs.test.env-vars]
SQLALCHEMY_WARN_20 = "1"
[tool.hatch.envs.test.scripts]
run = "pytest {args:tests}"
cov = "coverage run -m pytest {args:tests}"

[[tool.hatch.envs.test.matrix]]
sqlalchemy = ["1", "2"]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.coverage]
dependencies = [
  "coverage[toml]>=6.5",
]
[tool.hatch.envs.coverage.scripts]
json = "coverage json"
xml = "coverage xml"
report = ["coverage combine", "coverage report --show-missing"]

[tool.hatch.envs.typing]
dependencies = ["mypy>=1.0.0", "pytest"]
[tool.hatch.envs.typing.scripts]
check = "mypy --strict --install-types --non-interactive {args:src/sqlean_driver tests}"

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]
[tool.hatch.envs.lint.scripts]
style = ["ruff check {args:.}", "black --check --diff {args:.}"]
style-gh = ["ruff check {args:.} --format github", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]

[tool.black]
target-version = ["py38"]
line-length = 100
skip-string-normalization = true

[tool.ruff]
ignore = [
  "ANN101",  # missing-type-self
  "ANN102",  # missing-type-cls
]
line-length = 100
select = [
  "ALL",
]
target-version = "py38"

[tool.ruff.isort]
known-first-party = ["sqlean_driver"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "ANN201"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = ["-vv", "-W error"]

[tool.coverage.run]
source_pkgs = ["sqlean_driver", "tests"]
branch = true
parallel = true
omit = ["src/sqlean_driver/__about__.py"]

[tool.coverage.paths]
sqlean_driver = ["src/sqlean_driver", "*/sqlean-driver/src/sqlean_driver"]
tests = ["tests", "*/sqlean-driver/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov", "if __name__ == .__main__.:",
  "if t.TYPE_CHECKING:",
]

[tool.mypy]
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "sqlean.*",
]
